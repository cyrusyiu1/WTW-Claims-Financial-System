{"ast":null,"code":"import jwt from \"jwt-decode\";\nconst initialState = {\n  user: {\n    id: loadTokenId(),\n    username: loadTokenUser()\n  },\n  userPassword: {},\n  registerResult: {\n    type: 'idle'\n  },\n  loginResult: {\n    type: 'idle'\n  },\n  isAuthenticated: localStorage.getItem('token') != null,\n  msg: \"\"\n};\nfunction loadTokenUser() {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const payload = jwt(token);\n    return payload.username;\n  }\n  return \"\";\n}\nfunction loadTokenId() {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const payload = jwt(token);\n    return payload.id;\n  }\n  return \"\";\n}\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"@@Auth/LOGIN\":\n      return {\n        ...state,\n        isAuthenticated: true\n      };\n    default:\n      {\n        return state;\n      }\n    case \"@@Auth/LOGOUT\":\n      return {\n        ...state,\n        isAuthenticated: false\n      };\n  }\n};","map":{"version":3,"names":["jwt","initialState","user","id","loadTokenId","username","loadTokenUser","userPassword","registerResult","type","loginResult","isAuthenticated","localStorage","getItem","msg","token","payload","authReducer","state","arguments","length","undefined","action"],"sources":["/Users/cyrusyiu/WTW-Claims-Financial-System/Client/src/redux/auth/reducer.ts"],"sourcesContent":["import { IAuthAction } from \"./action\";\nimport { IAuthState, JWTPayload } from \"./state\";\nimport jwt from \"jwt-decode\"\n\nconst initialState:IAuthState = {\n    user : {id:loadTokenId() as number,username:loadTokenUser()},\n    userPassword: {},\n    registerResult: { type: 'idle' },\n    loginResult:{type: 'idle' },\n    isAuthenticated: (localStorage.getItem('token') !=null),\n    msg: \"\"\n}\n\nfunction loadTokenUser() {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const payload: JWTPayload = jwt(token)\n        return payload.username\n    }\n    return \"\"\n}\n\nfunction loadTokenId() {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const payload: JWTPayload = jwt(token)\n        return payload.id\n    }\n    return \"\"\n}\n\nexport const authReducer = (state: IAuthState= initialState, action:IAuthAction) =>{\n    switch(action.type){\n        case \"@@Auth/LOGIN\":\n            return {\n                ...state,\n                isAuthenticated: true\n            } \n        default:{return state}\n\n        case \"@@Auth/LOGOUT\":\n            return {\n                ...state,\n                isAuthenticated: false,\n\n            } \n    }\n}"],"mappings":"AAEA,OAAOA,GAAG,MAAM,YAAY;AAE5B,MAAMC,YAAuB,GAAG;EAC5BC,IAAI,EAAG;IAACC,EAAE,EAACC,WAAW,EAAY;IAACC,QAAQ,EAACC,aAAa;EAAE,CAAC;EAC5DC,YAAY,EAAE,CAAC,CAAC;EAChBC,cAAc,EAAE;IAAEC,IAAI,EAAE;EAAO,CAAC;EAChCC,WAAW,EAAC;IAACD,IAAI,EAAE;EAAO,CAAC;EAC3BE,eAAe,EAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAG,IAAK;EACvDC,GAAG,EAAE;AACT,CAAC;AAED,SAASR,aAAaA,CAAA,EAAG;EACrB,MAAMS,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIE,KAAK,EAAE;IACP,MAAMC,OAAmB,GAAGhB,GAAG,CAACe,KAAK,CAAC;IACtC,OAAOC,OAAO,CAACX,QAAQ;EAC3B;EACA,OAAO,EAAE;AACb;AAEA,SAASD,WAAWA,CAAA,EAAG;EACnB,MAAMW,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIE,KAAK,EAAE;IACP,MAAMC,OAAmB,GAAGhB,GAAG,CAACe,KAAK,CAAC;IACtC,OAAOC,OAAO,CAACb,EAAE;EACrB;EACA,OAAO,EAAE;AACb;AAEA,OAAO,MAAMc,WAAW,GAAG,SAAAA,CAAA,EAAwD;EAAA,IAAvDC,KAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAElB,YAAY;EAAA,IAAEqB,MAAkB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC3E,QAAOC,MAAM,CAACb,IAAI;IACd,KAAK,cAAc;MACf,OAAO;QACH,GAAGS,KAAK;QACRP,eAAe,EAAE;MACrB,CAAC;IACL;MAAQ;QAAC,OAAOO,KAAK;MAAA;IAErB,KAAK,eAAe;MAChB,OAAO;QACH,GAAGA,KAAK;QACRP,eAAe,EAAE;MAErB,CAAC;EAAA;AAEb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}